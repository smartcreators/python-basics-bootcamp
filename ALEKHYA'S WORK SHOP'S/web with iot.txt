<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>IoT Dashboard</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/css/bootstrap.min.css" rel="stylesheet">
  <style>
    body {
      background: linear-gradient(to right,#040193,#181818);
      font-family: 'italic', 'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode', Geneva, Verdana, sans-serif;
      color: #0c0c0c;
    }
    header{
        background-color: rgb(28, 20, 58);
    }
    
    
    .card h5 {      
      font-weight: initial;
    }
    .btn-custom {
      background: linear-gradient(to right, #95df03, #48d60b);
      color: white;
      font-weight:bolder;
      border: none;
      padding: 10px 20px;
      border-radius: 50px;
      transition: all 0.3s ease;
    } 
    .btn-custom:hover {
      background: linear-gradient(to right, #f41111e3, #eb0303c6);
    }
    .chart-container {
      height: 300px;
      width: 100%;
      margin-bottom: 20px;
    }
    footer {
      text-align: center;
      margin-top: 20px;
      padding: 10px;
      background-color: #01010a;
      color: white;
      border-top: 3px solid #fbfcfd;
    }   
    #liveDataContainer {
    display: flex;
    flex-direction: column;
    align-items: flex-start; /* Ensure items are left-aligned */
    padding: 20px; /* Add padding inside the container */
    line-height: 1.5; /* Improve line height for readability */
  }
  </style>
  <body>
    <header class=" text-white py-3 text-center">
      <h1>IOT DASHBOARD</h1>
      <p>Paralysis Patient Monitornig & Alert Systum</p>
    </header>
    <div class="container mt-4">
        <div class="row g-4">
          <!-- Alerts Section -->
          <div class="col-md-4">
            <div class="card text-center p-3">
              <h5>Alerts</h5>
              <div class="alerts-container mt-3">
                <!-- Dynamic alerts will be added here -->
              </div>
            </div>
          </div>
          <!-- Device Control Section -->
          <div class="col-md-4">
            <div class="card text-center p-3">
              <h5>Device Control</h5>
              <div class="d-grid gap-1 mt-3">
                <button class="btn btn-custom" onclick="toggleDevice('1')">EMERGENCY BUTTON</button>
              </div>
            </div>
          </div>
          <!-- Live Data Section -->
          <div class="col-md-4">
            <div class="card text-center p-3">
                <h5>Live Data</h5>
                <div id="liveDataContainer" class="mt-3">
                  <!-- Dynamic content will be added here -->
                </div>            
            </div>
          </div>
        </div>
        <!-- Live Graph Section -->
        <div class="row mt-4">
          <div id="dynamicCharts" class="col-12">
            <div class="card p-3">
              <h5 class="text-center">Live Pulse Rate</h5>
              <div id="chartsContainer"></div>
            </div>
          </div>
        </div>
    </div>
      <!-- Live Graph Section -->
      <div class="row mt-4">
        <div id="dynamicCharts" class="col-12">
          <div class="card p-3">
            <h5 class="text-center">Live Oxygen Level</h5>
            <div id="chartsContainer"></div>
          </div>
        </div>
      </div>
    </div>
       
    <footer>
      &copy; 2024 IOT DASHBOARD for paralysis patient monitorning systum
    </footer>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
      async function toggleDevice(deviceId) {
          try {
              const response = await fetch( {
              method: 'POST',
              headers: {
                  'Content-Type': 'application/json'
              },
              body: JSON.stringify({ device_id: deviceId })
              });
              const data = await response.json();
              if (response.ok) {
              alert(`Device ${deviceId} is now ${data.state}`);
              } else {
              alert(`Error: ${data.error}`);
              }
          } catch (error) {
              console.error('Error toggling device:', error);
          }
          }
    </script>
    <script>
      async function updateAlerts() {
        try {
            const response = await fetch(); // Fetch alerts from the API
            const alerts = await response.json(); // Example: [{"type": "warning", "message": "High Temperature Detected!", "timestamp": "2024-12-13T08:00:00Z"}]
            const alertsContainer = document.querySelector('.alerts-container'); // Container for alerts
            alertsContainer.innerHTML = ''; // Clear existing alerts
            const today = new Date(); // Get today's date
            today.setHours(0, 0, 0, 0); // Reset time to midnight
            // Filter alerts for today's date
            const todayAlerts = alerts.filter(alert => {
                const alertDate = new Date(alert.timestamp);
                return alertDate >= today && alertDate <= new Date(today.getTime() + 24 * 60 * 60 * 1000); // Check if the alert is within today's date range
            });
            todayAlerts.forEach(alert => {
                const alertDiv = document.createElement('div');
                alertDiv.className = `alert alert-${alert.type} mb-2`; // Use dynamic Bootstrap classes (e.g., alert-warning, alert-info)
                
                // Format timestamp
                const alertTime = new Date(alert.timestamp).toLocaleTimeString();
                // Add message with timestamp
                alertDiv.innerHTML = `<strong>${alert.message}</strong> <span class="text-muted">(${alertTime})</span>`;
                alertsContainer.appendChild(alertDiv);
            });
            if (todayAlerts.length === 0) {
                const noAlertsDiv = document.createElement('div');
                noAlertsDiv.className = `alert alert-info`;
                noAlertsDiv.textContent = 'No alerts for today.';
                alertsContainer.appendChild(noAlertsDiv);
            }
        } catch (error) {
            console.error('Error updating alerts:', error);
        }
    }
    // Periodically update alerts
    setInterval(updateAlerts, 5000); // Fetch and update alerts every 5 seconds
    updateAlerts(); // Initial fetch
    </script>
    
    <script>
      // Define units for each label
      const unitsMap = {
        "Humidity": "%",
        "Temperature": "Â°C",
        "PRESSURE":"",
        "PULSE RATE":"bpm",
        "OXYGEN LEVEL":"",
        "ACCELEROMETER":"",
        
      };
    
      async function updateLiveData() {
        try {
          const response = await fetch(); // Fetch data from the API
          const data = await response.json();
    
          // Group data by label
          const groupedData = {};
          data.forEach(item => {
            const label = item.label; // e.g., "Humidity", "Temperature"
            const value = item.value;
    
            groupedData[label] = value; // Store the latest value for each label
          });
    
          // Get the live data container
          const liveDataContainer = document.getElementById('liveDataContainer');
          liveDataContainer.innerHTML = ''; // Clear previous content
    
          // Populate the container with updated data
          Object.keys(groupedData).forEach(label => {
            const value = groupedData[label];
            const unit = unitsMap[label] || ""; // Get the unit for the label, default to empty string
    
            const p = document.createElement('p');
            p.className = 'mb-1';
            p.innerHTML = `<strong>${label}:</strong> <span>${value} ${unit}</span>`;
            liveDataContainer.appendChild(p);
          });
        } catch (error) {
          console.error('Error updating live data:', error);
        }
      }
    
      // Update live data periodically
      setInterval(updateLiveData, 5000); // Fetch and update every 5 seconds
      updateLiveData(); // Initial update
    </script>
    
    <script>
      const colorPalette = [
          'rgba(255, 99, 132, 1)',  // Red
          'rgba(54, 162, 235, 1)', // Blue
          'rgba(255, 206, 86, 1)', // Yellow
          'rgba(75, 192, 192, 1)', // Green
          'rgba(153, 102, 255, 1)', // Purple
          'rgba(255, 159, 64, 1)'  // Orange
      ];
      function getRandomColor() {
          const letters = '0123456789ABCDEF';
          let color = '#';
          for (let i = 0; i < 6; i++) {
              color += letters[Math.floor(Math.random() * 16)];
          }
          return color;
      }
      // Global variable to store chart instances
      const chartInstances = {};
      let isFetching = false; // Prevent overlapping fetch calls
      // Fetch data and dynamically create or update charts
      async function fetchDataAndCreateOrUpdateCharts() {
          if (isFetching) return; // Prevent overlapping fetch calls
          isFetching = true;
          try {
              const response = await fetch();
              const data = await response.json();
              const groupedData = {};
              data.forEach(item => {
                  const label = item.label;
                  const value = item.value;
                  const timestamp = new Date(item.timestamp).toLocaleTimeString();
                  if (!groupedData[label]) {
                      groupedData[label] = { timestamps: [], values: [] };
                  }
                  groupedData[label].timestamps.push(timestamp);
                  groupedData[label].values.push(value);
              });
              const container = document.getElementById('chartsContainer');
              Object.keys(groupedData).forEach((label, index) => {
                  if (!chartInstances[label]) {
                      // Create a card for the chart
                      const chartCard = document.createElement('div');
                      chartCard.className = 'chart-container';
                      const canvas = document.createElement('canvas');
                      canvas.id = `chart-${label}`;
                      chartCard.appendChild(canvas);
                      container.appendChild(chartCard);
                      const color = colorPalette[index % colorPalette.length] || getRandomColor();
                      const ctx = canvas.getContext('2d');
                      chartInstances[label] = new Chart(ctx, {
                          type: 'line',
                          data: {
                              labels: groupedData[label].timestamps,
                              datasets: [{
                                  label: `${label}`,
                                  borderColor: color,
                                  backgroundColor: color.replace('1)', '0.2)'),
                                  data: groupedData[label].values
                              }]
                          },
                          options: {
                              responsive: true,
                              maintainAspectRatio: false,
                              scales: {
                                  x: { title: { display: true, text: 'Time' } },
                                  y: { title: { display: true, text: label } }
                              }
                          }
                      });
                  } else {
                      // Reset the existing chart data
                      const chart = chartInstances[label];
                      chart.data.labels = []; // Clear x-axis labels
                      chart.data.datasets[0].data = []; // Clear y-axis values
                      // Add new data
                      groupedData[label].timestamps.forEach((timestamp, i) => {
                          chart.data.labels.push(timestamp);
                          chart.data.datasets[0].data.push(groupedData[label].values[i]);
                      });
                      // Update chart display
                      chart.update();
                  }
              });
          } catch (error) {
              console.error('Error fetching or updating charts:', error);
          } finally {
              isFetching = false; // Reset fetch lock
          }
      }
      // Initialize charts and set periodic updates
      fetchDataAndCreateOrUpdateCharts();
      setInterval(fetchDataAndCreateOrUpdateCharts, 5000);
    </script>
    
  </body>
  </html>
  
  